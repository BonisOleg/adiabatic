/* ===== PROMSTEEL STYLE JAVASCRIPT ===== */

document.addEventListener('DOMContentLoaded', function () {
    // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—É
    document.body.classList.add('loaded');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    initMobileMenu();
    initScrollAnimations();
    initHeroParallax();
    initButtonEffects();
    initSmoothScrolling();
    initUpButton();
    initHeaderScroll();
    initStaggeredAnimations();
    initLazyLoading();
    initFormValidation();

    console.log('üöÄ Promsteel Style JavaScript —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!');
});

/* ===== MOBILE MENU (Promsteel Style) ===== */
function initMobileMenu() {
    const toggle = document.querySelector('.mobile-menu-toggle');
    const nav = document.querySelector('.header__nav');

    if (!toggle || !nav) return;

    toggle.addEventListener('click', function () {
        const isOpen = nav.classList.contains('mobile-open');

        if (isOpen) {
            nav.classList.remove('mobile-open');
            toggle.classList.remove('active');
            document.body.classList.remove('menu-open');
        } else {
            nav.classList.add('mobile-open');
            toggle.classList.add('active');
            document.body.classList.add('menu-open');
        }
    });

    // –ó–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
    document.addEventListener('click', function (e) {
        if (!toggle.contains(e.target) && !nav.contains(e.target)) {
            nav.classList.remove('mobile-open');
            toggle.classList.remove('active');
            document.body.classList.remove('menu-open');
        }
    });
}

/* ===== SCROLL ANIMATIONS (IntersectionObserver) ===== */
function initScrollAnimations() {
    if (!shouldReduceMotion()) {
        const observerOptions = {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate');

                    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∞–Ω—ñ–º–∞—Ü—ñ–π
                    const animationClass = entry.target.getAttribute('data-animation');
                    if (animationClass) {
                        entry.target.classList.add(animationClass);
                    }

                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –≤—Å—ñ–º–∞ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑ –∫–ª–∞—Å–æ–º js-observe
        const animatedElements = document.querySelectorAll('.js-observe');
        animatedElements.forEach(el => {
            observer.observe(el);

            // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó
            if (el.classList.contains('slide-in-left')) {
                el.style.opacity = '0';
                el.style.transform = 'translateX(-50px)';
            } else if (el.classList.contains('slide-in-up')) {
                el.style.opacity = '0';
                el.style.transform = 'translateY(50px)';
            } else if (el.classList.contains('fade-in')) {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
            }
        });
    }
}

/* ===== HERO PARALLAX EFFECT ===== */
function initHeroParallax() {
    if (shouldReduceMotion()) return;

    const heroSection = document.querySelector('.hero');
    if (!heroSection) return;

    function updateParallax() {
        const scrolled = window.pageYOffset;
        const parallaxSpeed = 0.5;
        const yPos = -(scrolled * parallaxSpeed);

        heroSection.style.transform = `translateY(${yPos}px)`;
    }

    // Throttle —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    let ticking = false;
    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(updateParallax);
            ticking = true;
            setTimeout(() => ticking = false, 16);
        }
    }

    window.addEventListener('scroll', requestTick);
}

/* ===== BUTTON EFFECTS (Promsteel Style) ===== */
function initButtonEffects() {
    const buttons = document.querySelectorAll('.btn');

    buttons.forEach(button => {
        // Ripple effect –ø—Ä–∏ –∫–ª—ñ–∫—É
        button.addEventListener('click', function (e) {
            const ripple = document.createElement('span');
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;

            ripple.style.width = ripple.style.height = size + 'px';
            ripple.style.left = x + 'px';
            ripple.style.top = y + 'px';
            ripple.classList.add('ripple');

            // CSS –¥–ª—è ripple –µ—Ñ–µ–∫—Ç—É
            ripple.style.position = 'absolute';
            ripple.style.borderRadius = '50%';
            ripple.style.background = 'rgba(255, 255, 255, 0.6)';
            ripple.style.pointerEvents = 'none';
            ripple.style.animation = 'ripple-animation 0.6s linear';

            this.appendChild(ripple);

            setTimeout(() => {
                ripple.remove();
            }, 600);
        });

        // Pulse –µ—Ñ–µ–∫—Ç –¥–ª—è primary –∫–Ω–æ–ø–æ–∫
        if (button.classList.contains('btn--primary')) {
            button.addEventListener('mouseenter', function () {
                if (!shouldReduceMotion()) {
                    this.classList.add('pulse');
                    setTimeout(() => this.classList.remove('pulse'), 600);
                }
            });
        }
    });

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è CSS –¥–ª—è ripple –∞–Ω—ñ–º–∞—Ü—ñ—ó
    if (!document.getElementById('ripple-style')) {
        const style = document.createElement('style');
        style.id = 'ripple-style';
        style.textContent = `
            @keyframes ripple-animation {
                to {
                    transform: scale(4);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
    }
}

/* ===== SMOOTH SCROLLING ===== */
function initSmoothScrolling() {
    const anchors = document.querySelectorAll('a[href^="#"]');

    anchors.forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();

            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                const headerHeight = document.querySelector('.header').offsetHeight;
                const targetPosition = target.offsetTop - headerHeight;

                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
}

/* ===== UP BUTTON FUNCTIONALITY ===== */
function initUpButton() {
    const upButton = document.querySelector('.footer__up-button');
    if (!upButton) return;

    // –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏/—Ö–æ–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ
    function toggleUpButton() {
        if (window.pageYOffset > 300) {
            upButton.style.opacity = '1';
            upButton.style.visibility = 'visible';
            upButton.style.transform = 'translateY(0)';
        } else {
            upButton.style.opacity = '0';
            upButton.style.visibility = 'hidden';
            upButton.style.transform = 'translateY(10px)';
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ
    upButton.style.transition = 'all 0.3s ease';
    upButton.style.opacity = '0';
    upButton.style.visibility = 'hidden';
    upButton.style.transform = 'translateY(10px)';

    // Throttle –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    let ticking = false;
    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(toggleUpButton);
            ticking = true;
            setTimeout(() => ticking = false, 16);
        }
    }

    window.addEventListener('scroll', requestTick);
}

/* ===== HEADER SCROLL EFFECT ===== */
function initHeaderScroll() {
    const header = document.querySelector('.header');
    if (!header) return;

    let lastScrollTop = 0;

    function handleHeaderScroll() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

        if (scrollTop > 100) {
            header.classList.add('header--scrolled');
        } else {
            header.classList.remove('header--scrolled');
        }

        // –•–æ–≤–∞—Ç–∏ header –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ –≤–Ω–∏–∑, –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ –≤–≥–æ—Ä—É
        if (scrollTop > lastScrollTop && scrollTop > 200) {
            header.style.transform = 'translateY(-100%)';
        } else {
            header.style.transform = 'translateY(0)';
        }

        lastScrollTop = scrollTop;
    }

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è CSS –¥–ª—è header –µ—Ñ–µ–∫—Ç—ñ–≤
    header.style.transition = 'all 0.3s ease';

    // Throttle –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    let ticking = false;
    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(handleHeaderScroll);
            ticking = true;
            setTimeout(() => ticking = false, 16);
        }
    }

    window.addEventListener('scroll', requestTick);
}

/* ===== STAGGERED ANIMATIONS ===== */
function initStaggeredAnimations() {
    if (shouldReduceMotion()) return;

    const staggeredContainers = document.querySelectorAll('.equipment-grid, .about-features__list');

    staggeredContainers.forEach(container => {
        const items = container.children;

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ staggered –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–æ –¥—ñ—Ç–µ–π
                    Array.from(items).forEach((item, index) => {
                        setTimeout(() => {
                            item.style.opacity = '1';
                            item.style.transform = 'translateY(0)';
                        }, index * 100);
                    });

                    observer.unobserve(entry.target);
                }
            });
        }, {
            threshold: 0.1
        });

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –¥—ñ—Ç–µ–π
        Array.from(items).forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(30px)';
            item.style.transition = 'all 0.6s ease';
        });

        observer.observe(container);
    });
}

/* ===== LAZY LOADING FOR IMAGES ===== */
function initLazyLoading() {
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;

                    if (img.dataset.src) {
                        img.src = img.dataset.src;
                        img.classList.remove('lazy');
                        img.classList.add('lazy-loaded');
                        imageObserver.unobserve(img);
                    }
                }
            });
        });

        const lazyImages = document.querySelectorAll('img[data-src]');
        lazyImages.forEach(img => {
            img.classList.add('lazy');
            imageObserver.observe(img);
        });
    }
}

/* ===== FORM VALIDATION (Enhanced) ===== */
function initFormValidation() {
    const forms = document.querySelectorAll('form');

    forms.forEach(form => {
        const inputs = form.querySelectorAll('input, textarea, select');

        inputs.forEach(input => {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
            input.addEventListener('blur', function () {
                validateField(this);
            });

            input.addEventListener('input', function () {
                clearFieldError(this);
            });
        });

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–∏ —Å–∞–±–º—ñ—Ç—ñ
        form.addEventListener('submit', function (e) {
            let isValid = true;

            inputs.forEach(input => {
                if (!validateField(input)) {
                    isValid = false;
                }
            });

            if (!isValid) {
                e.preventDefault();

                // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                showFormMessage(form, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ', 'error');

                // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –¥–æ –ø–µ—Ä—à–æ—ó –ø–æ–º–∏–ª–∫–∏
                const firstError = form.querySelector('.field-error');
                if (firstError) {
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }
        });
    });
}

function validateField(field) {
    const value = field.value.trim();
    const type = field.type;
    const required = field.hasAttribute('required');

    clearFieldError(field);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (required && !value) {
        showFieldError(field, '–¶–µ –ø–æ–ª–µ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
        return false;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
    if (type === 'email' && value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) {
            showFieldError(field, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É');
            return false;
        }
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if (type === 'tel' && value) {
        const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
        if (!phoneRegex.test(value)) {
            showFieldError(field, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É');
            return false;
        }
    }

    return true;
}

function showFieldError(field, message) {
    field.classList.add('field-error');

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    let errorElement = field.parentNode.querySelector('.error-message');
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        field.parentNode.appendChild(errorElement);
    }

    errorElement.textContent = message;
    errorElement.style.color = 'var(--promsteel-red-accent)';
    errorElement.style.fontSize = 'var(--text-sm)';
    errorElement.style.marginTop = 'var(--spacing-1)';
}

function clearFieldError(field) {
    field.classList.remove('field-error');

    const errorElement = field.parentNode.querySelector('.error-message');
    if (errorElement) {
        errorElement.remove();
    }
}

function showFormMessage(form, message, type) {
    // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const existingMessage = form.querySelector('.form-message');
    if (existingMessage) {
        existingMessage.remove();
    }

    const messageElement = document.createElement('div');
    messageElement.className = `form-message form-message--${type}`;
    messageElement.textContent = message;

    // –°—Ç–∏–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    messageElement.style.padding = 'var(--spacing-3) var(--spacing-4)';
    messageElement.style.borderRadius = 'var(--radius-md)';
    messageElement.style.marginBottom = 'var(--spacing-4)';
    messageElement.style.fontWeight = 'var(--font-medium)';

    if (type === 'error') {
        messageElement.style.background = 'rgba(229, 62, 62, 0.1)';
        messageElement.style.color = 'var(--promsteel-red-accent)';
        messageElement.style.border = '1px solid var(--promsteel-red-accent)';
    } else if (type === 'success') {
        messageElement.style.background = 'rgba(52, 168, 83, 0.1)';
        messageElement.style.color = '#34A853';
        messageElement.style.border = '1px solid #34A853';
    }

    form.insertBefore(messageElement, form.firstChild);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (messageElement.parentNode) {
            messageElement.remove();
        }
    }, 5000);
}

/* ===== UTILITY FUNCTIONS ===== */

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ–¥–æ –∑–º–µ–Ω—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π
function shouldReduceMotion() {
    return window.matchMedia('(prefers-reduced-motion: reduce)').matches;
}

// Throttle —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–æ–¥—ñ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function throttle(func, limit) {
    let inThrottle;
    return function () {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    };
}

// Debounce —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–æ–¥—ñ–π –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

/* ===== KEYBOARD NAVIGATION ===== */
document.addEventListener('keydown', function (e) {
    // ESC –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    if (e.key === 'Escape') {
        const nav = document.querySelector('.header__nav');
        const toggle = document.querySelector('.mobile-menu-toggle');

        if (nav && nav.classList.contains('mobile-open')) {
            nav.classList.remove('mobile-open');
            toggle.classList.remove('active');
            document.body.classList.remove('menu-open');
        }
    }
});

/* ===== CONSOLE LOG ===== */
console.log(`
üé® Promsteel Style Website
üöÄ JavaScript —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
‚ö° –í—Å—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ –µ—Ñ–µ–∫—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ
üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –¥–∏–∑–∞–π–Ω –≥–æ—Ç–æ–≤–∏–π
`);

/* ===== ERROR HANDLING ===== */
window.addEventListener('error', function (e) {
    console.error('JavaScript Error:', e.error);
});

window.addEventListener('unhandledrejection', function (e) {
    console.error('Unhandled Promise Rejection:', e.reason);
});