from django.core.management.base import BaseCommand
from django.core.files.base import ContentFile
from catalog.models import Product, ProductGallery, Category
from PIL import Image
import io
import os


class Command(BaseCommand):
    help = 'Create test products with 3D gallery items'

    def handle(self, *args, **options):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ 3D —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        category, created = Category.objects.get_or_create(
            slug='test-heat-exchangers',
            defaults={
                'name_uk': '–¢–µ—Å—Ç–æ–≤—ñ —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫–∏',
                'name_ru': '–¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏',
                'name_en': 'Test Heat Exchangers',
                'description_uk': '–¢–µ—Å—Ç–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó 3D —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ',
                'description_ru': '–¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ 3D —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
                'description_en': 'Test products for 3D functionality demonstration',
                'icon': 'fas fa-cube',
                'is_published': True
            }
        )
        
        if created:
            self.stdout.write(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category.name_uk}")
        else:
            self.stdout.write(f"üìÅ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ—Å–Ω—É—é—á–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name_uk}")
        
        # –¢–µ—Å—Ç–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
        test_products = [
            {
                'slug': 'plate-heat-exchanger-3d',
                'name_uk': '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫ FP09-77',
                'name_ru': '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ FP09-77',
                'name_en': 'Plate Heat Exchanger FP09-77',
                'short_description_uk': '–í–∏—Å–æ–∫–æ–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –ø–ª–∞—Å—Ç–∏–Ω—á–∞—Ç–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–º–∏—Å–ª–æ–≤–∏—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω—å',
                'short_description_ru': '–í—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π',
                'short_description_en': 'High-efficiency plate heat exchanger for industrial applications',
                'description_uk': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø–ª–∞—Å—Ç–∏–Ω—á–∞—Ç–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫ –∑ –Ω–µ—Ä–∂–∞–≤—ñ—é—á–æ—ó —Å—Ç–∞–ª—ñ. –ó–∞–±–µ–∑–ø–µ—á—É—î –≤–∏—Å–æ–∫—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–¥–∞—á—ñ —Ç–∞ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å –≤ –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—ó.',
                'description_ru': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ –∏–∑ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–¥–∞—á–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.',
                'description_en': 'Professional stainless steel plate heat exchanger. Provides high heat transfer efficiency and operational reliability.',
                'power_kw': 50.5,
                'max_pressure_bar': 16.0,
                'max_temperature_c': 180.0,
                'price_usd': 2500.00,
                'files': [
                    {'type': '3D_MODEL', 'filename': 'FP09-77-1-NH.stp'},
                    {'type': 'IMAGE', 'filename': 'plate_exchanger_1.jpg'},
                    {'type': 'IMAGE', 'filename': 'plate_exchanger_2.jpg'},
                ]
            },
            {
                'slug': 'shell-tube-exchanger-3d',
                'name_uk': '–ö–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫ 569kW',
                'name_ru': '–ö–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ 569kW',
                'name_en': 'Shell & Tube Heat Exchanger 569kW',
                'short_description_uk': '–ü–æ—Ç—É–∂–Ω–∏–π –∫–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–æ–º–∏—Å–ª–æ–≤–∏—Ö —Å–∏—Å—Ç–µ–º',
                'short_description_ru': '–ú–æ—â–Ω—ã–π –∫–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º',
                'short_description_en': 'Powerful shell & tube heat exchanger for large industrial systems',
                'description_uk': '–í–∏—Å–æ–∫–æ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π –∫–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 569 –∫–í—Ç. –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–µ–ª–∏–∫–∏–º–∏ –æ–±\'—î–º–∞–º–∏ —Ä—ñ–¥–∏–Ω –ø—Ä–∏ –≤–∏—Å–æ–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö.',
                'description_ru': '–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ –º–æ—â–Ω–æ—Å—Ç—å—é 569 –∫–í—Ç. –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö.',
                'description_en': 'High-performance shell & tube heat exchanger with 569 kW capacity. Designed for handling large fluid volumes at high temperatures.',
                'power_kw': 569.0,
                'max_pressure_bar': 25.0,
                'max_temperature_c': 300.0,
                'price_usd': 15000.00,
                'files': [
                    {'type': '3D_MODEL', 'filename': 'Heating_Unit_569_kW.stp'},
                    {'type': 'IMAGE', 'filename': 'shell_tube_1.jpg'},
                    {'type': 'TECHNICAL_DRAWING', 'filename': 'shell_tube_drawing.dwg'},
                ]
            },
            {
                'slug': 'compact-heat-exchanger-3d',
                'name_uk': '–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫',
                'name_ru': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫',
                'name_en': 'Compact Heat Exchanger',
                'short_description_uk': '–ï–∫–æ–Ω–æ–º—ñ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –º–∞–ª–∏—Ö —Ç–∞ —Å–µ—Ä–µ–¥–Ω—ñ—Ö —Å–∏—Å—Ç–µ–º',
                'short_description_ru': '–≠–∫–æ–Ω–æ–º–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –º–∞–ª—ã—Ö –∏ —Å—Ä–µ–¥–Ω–∏—Ö —Å–∏—Å—Ç–µ–º',
                'short_description_en': 'Cost-effective solution for small to medium systems',
                'description_uk': '–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ç–∞ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫ –¥–ª—è –Ω–µ–≤–µ–ª–∏–∫–∏—Ö —Å–∏—Å—Ç–µ–º. –õ–µ–≥–∫–∏–π –≤ –º–æ–Ω—Ç–∞–∂—ñ —Ç–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—ñ.',
                'description_ru': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å–∏—Å—Ç–µ–º. –õ–µ–≥–∫–∏–π –≤ –º–æ–Ω—Ç–∞–∂–µ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.',
                'description_en': 'Compact and economical heat exchanger for small systems. Easy to install and maintain.',
                'power_kw': 25.0,
                'max_pressure_bar': 10.0,
                'max_temperature_c': 120.0,
                'price_usd': 1200.00,
                'files': [
                    {'type': 'IMAGE', 'filename': 'compact_1.jpg'},
                    {'type': 'IMAGE', 'filename': 'compact_2.jpg'},
                ]
            }
        ]
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏
        for product_data in test_products:
            files_data = product_data.pop('files')
            
            product, created = Product.objects.get_or_create(
                slug=product_data['slug'],
                defaults={
                    **product_data,
                    'category': category,
                    'is_published': True,
                    'is_featured': True
                }
            )
            
            if created:
                self.stdout.write(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: {product.name_uk}")
                
                # –î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏ –¥–æ –≥–∞–ª–µ—Ä–µ—ó
                for i, file_data in enumerate(files_data):
                    gallery_item = self.create_gallery_item(
                        product, 
                        file_data['type'], 
                        file_data['filename'],
                        i
                    )
                    if gallery_item:
                        self.stdout.write(f"   üìÅ –î–æ–¥–∞–Ω–æ –¥–æ –≥–∞–ª–µ—Ä–µ—ó: {file_data['filename']}")
            else:
                self.stdout.write(f"üì¶ –ü—Ä–æ–¥—É–∫—Ç –≤–∂–µ —ñ—Å–Ω—É—î: {product.name_uk}")
        
        self.stdout.write(
            self.style.SUCCESS(
                f"\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó 3D —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ.\n"
                f"   –í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ /catalog/ —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            )
        )
    
    def create_gallery_item(self, product, content_type, filename, order):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ—ó –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î
        existing = ProductGallery.objects.filter(
            product=product,
            title_uk__icontains=filename.split('.')[0]
        ).first()
        
        if existing:
            return existing
        
        gallery_item = ProductGallery.objects.create(
            product=product,
            content_type=content_type,
            title_uk=f"{filename.split('.')[0].replace('_', ' ').title()}",
            title_ru=f"{filename.split('.')[0].replace('_', ' ').title()}",
            title_en=f"{filename.split('.')[0].replace('_', ' ').title()}",
            alt_text=f"{content_type} {filename}",
            description=f"–¢–µ—Å—Ç–æ–≤–∏–π {content_type.lower()} —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó",
            order=order,
            is_downloadable=True,
            file_size=self.get_mock_file_size(content_type)
        )
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
        if content_type == 'IMAGE':
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç–µ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            test_image = self.create_test_image(filename)
            gallery_item.image.save(filename, test_image, save=False)
        
        elif content_type == '3D_MODEL':
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π 3D —Ñ–∞–π–ª
            test_3d_content = self.create_test_3d_content(filename)
            gallery_item.file_3d.save(filename, test_3d_content, save=False)
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è 3D –º–æ–¥–µ–ª—ñ
            preview_image = self.create_test_image(f"preview_{filename}.jpg")
            gallery_item.preview_image.save(f"preview_{filename}.jpg", preview_image, save=False)
        
        elif content_type == 'TECHNICAL_DRAWING':
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –∫—Ä–µ—Å–ª–µ–Ω–Ω—è
            test_drawing = self.create_test_drawing_content(filename)
            gallery_item.file_3d.save(filename, test_drawing, save=False)
        
        gallery_item.save()
        return gallery_item
    
    def create_test_image(self, filename):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç–µ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç —è–∫ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        img = Image.new('RGB', (400, 300), color='lightblue')
        
        # –î–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç (—Å–ø—Ä–æ—â–µ–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –±–µ–∑ PIL.ImageDraw)
        buffer = io.BytesIO()
        img.save(buffer, format='JPEG', quality=85)
        buffer.seek(0)
        
        return ContentFile(buffer.getvalue(), name=filename)
    
    def create_test_3d_content(self, filename):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π 3D —Ñ–∞–π–ª"""
        # –ü—Ä–æ—Å—Ç–∏–π STEP —Ñ–∞–π–ª header (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π)
        step_content = """ISO-10303-21;
HEADER;
FILE_DESCRIPTION(('Test 3D Model'), '2;1');
FILE_NAME('""" + filename + """', '2024-01-01T12:00:00', ('Test'), ('Test Organization'), 'Test CAD System', 'Test CAD System', '');
FILE_SCHEMA(('AUTOMOTIVE_DESIGN { 1 0 10303 214 1 1 1 1 }'));
ENDSEC;

DATA;
#1 = APPLICATION_CONTEXT('automotive_design') ;
#2 = APPLICATION_PROTOCOL_DEFINITION('automotive_design','','AP214',#1) ;
ENDSEC;

END-ISO-10303-21;
"""
        return ContentFile(step_content.encode('utf-8'), name=filename)
    
    def create_test_drawing_content(self, filename):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –∫—Ä–µ—Å–ª–µ–Ω–Ω—è"""
        # –ü—Ä–æ—Å—Ç–∏–π DWG header placeholder
        dwg_content = b"Test DWG file content - placeholder for demonstration"
        return ContentFile(dwg_content, name=filename)
    
    def get_mock_file_size(self, content_type):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤"""
        sizes = {
            'IMAGE': '250 KB',
            '3D_MODEL': '1.2 MB',
            'TECHNICAL_DRAWING': '450 KB'
        }
        return sizes.get(content_type, '100 KB')


