from django.core.management.base import BaseCommand
from django.core.files import File
from django.conf import settings
from catalog.models import Product, ProductGallery, Category
from PIL import Image
import os
import shutil
from pathlib import Path


class Command(BaseCommand):
    help = 'Import real 3D products from static/images/3D/ directory'

    def add_arguments(self, parser):
        parser.add_argument(
            '--copy-files',
            action='store_true',
            help='Copy files to media directory for production use',
        )

    def handle(self, *args, **options):
        """–Ü–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω–∏—Ö 3D —Ñ–∞–π–ª—ñ–≤ –∑ –ø–∞–ø–∫–∏ static/images/3D/"""
        
        self.copy_files = options.get('copy_files', False)
        
        # –ë–∞–∑–æ–≤–∏–π —à–ª—è—Ö –¥–æ 3D —Ñ–∞–π–ª—ñ–≤
        base_3d_path = Path(settings.BASE_DIR) / 'static' / 'images' / '3D'
        
        if not base_3d_path.exists():
            self.stdout.write(
                self.style.ERROR(f"‚ùå –ü–∞–ø–∫–∞ {base_3d_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            )
            return
        
        # Mapping –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        categories_mapping = {
            '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç': {
                'code': 'CUSTOM',
                'name_uk': '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫–∏',
                'name_ru': '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏',
                'name_en': 'Custom Heat Exchangers',
                'description_uk': '–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–º–∏—Å–ª–æ–≤–∏—Ö –∑–∞–¥–∞—á',
                'description_ru': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
                'description_en': 'Special solutions for unique industrial applications',
                'icon': 'fas fa-cogs'
            },
            '–¢—Ä—É–±—á–∞—Ç—ã–µ': {
                'code': 'SHELL_TUBE',
                'name_uk': '–ö–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω—ñ —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫–∏',
                'name_ru': '–ö–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω—ã–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏',
                'name_en': 'Shell & Tube Heat Exchangers',
                'description_uk': '–ù–∞–¥—ñ–π–Ω—ñ –∫–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω—ñ —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–∏—Å–ª–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤',
                'description_ru': '–ù–∞–¥–µ–∂–Ω—ã–µ –∫–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω—ã–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
                'description_en': 'Reliable shell & tube heat exchangers for industrial processes',
                'icon': 'fas fa-industry'
            },
            '–ü–∞—è–Ω—ã–µ': {
                'code': 'BRAZED',
                'name_uk': '–ü–∞—è–Ω—ñ —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫–∏',
                'name_ru': '–ü–∞—è–Ω—ã–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏', 
                'name_en': 'Brazed Heat Exchangers',
                'description_uk': '–ö–æ–º–ø–∞–∫—Ç–Ω—ñ –ø–∞—è–Ω—ñ —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫–∏ –≤–∏—Å–æ–∫–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
                'description_ru': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø–∞—è–Ω—ã–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏ –≤—ã—Å–æ–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                'description_en': 'Compact high-efficiency brazed heat exchangers',
                'icon': 'fas fa-fire'
            },
            '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–µ': {
                'code': 'PLATE',
                'name_uk': '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ñ —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫–∏',
                'name_ru': '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏',
                'name_en': 'Plate Heat Exchangers',
                'description_uk': '–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –ø–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ñ —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω—å',
                'description_ru': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π',
                'description_en': 'Efficient plate heat exchangers for various applications',
                'icon': 'fas fa-layer-group'
            }
        }
        
        total_products = 0
        total_files = 0
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        for category_folder, category_info in categories_mapping.items():
            category_path = base_3d_path / category_folder
            
            if not category_path.exists():
                self.stdout.write(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ {category_folder} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                continue
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            category, created = Category.objects.get_or_create(
                slug=category_info['code'].lower().replace('_', '-'),
                defaults={
                    **{k: v for k, v in category_info.items() if k != 'code'},
                    'is_published': True,
                    'order': len(categories_mapping) - list(categories_mapping.keys()).index(category_folder)
                }
            )
            
            if created:
                self.stdout.write(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category.name_uk}")
            
            # –û–±—Ä–æ–±–∫–∞ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø–∞–ø–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            numbered_dirs = [d for d in category_path.iterdir() if d.is_dir() and d.name.isdigit()]
            numbered_dirs.sort(key=lambda x: int(x.name))
            
            for product_dir in numbered_dirs:
                product_number = int(product_dir.name)
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É
                product = self.create_product(category, category_folder, product_number, product_dir)
                if product:
                    total_products += 1
                    
                    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–æ –≥–∞–ª–µ—Ä–µ—ó
                    files_added = self.add_files_to_gallery(product, product_dir, category_folder, product_number)
                    total_files += files_added
        
        self.stdout.write(
            self.style.SUCCESS(
                f"\nüéâ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                f"   üì¶ –ü—Ä–æ–¥—É–∫—Ç—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {total_products}\n"
                f"   üìÅ –§–∞–π–ª—ñ–≤ –¥–æ–¥–∞–Ω–æ: {total_files}\n"
                f"   üöÄ –í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ /catalog/ —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            )
        )
        
        if self.copy_files:
            self.stdout.write(
                self.style.SUCCESS(
                    "üìã –§–∞–π–ª–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω—ñ –¥–æ media/ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"
                )
            )

    def create_product(self, category, category_folder, product_number, product_dir):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–∞–ø–∫–∏"""
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–∞–∑–≤–∏ –ø—Ä–æ–¥—É–∫—Ç—É
        product_names = self.generate_product_names(category_folder, product_number, product_dir)
        
        slug = f"{category.slug}-{product_number}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–æ–¥—É–∫—Ç –≤–∂–µ —ñ—Å–Ω—É—î
        existing_product = Product.objects.filter(slug=slug).first()
        if existing_product:
            self.stdout.write(f"üì¶ –ü—Ä–æ–¥—É–∫—Ç –≤–∂–µ —ñ—Å–Ω—É—î: {existing_product.name_uk}")
            return existing_product
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É
        product = Product.objects.create(
            category=category,
            slug=slug,
            **product_names,
            power_kw=self.estimate_power(product_dir),
            max_pressure_bar=self.estimate_pressure(category_folder),
            max_temperature_c=self.estimate_temperature(category_folder),
            application_type=self.get_application_type(category_folder),
            is_published=True,
            is_featured=product_number <= 3  # –ü–µ—Ä—à—ñ 3 –≤ –∫–æ–∂–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫ featured
        )
        
        self.stdout.write(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: {product.name_uk}")
        return product
    
    def generate_product_names(self, category_folder, product_number, product_dir):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–∞–∑–≤ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        
        # –ë–∞–∑–æ–≤—ñ –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        base_names = {
            '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç': {
                'uk': '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫',
                'ru': '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫',
                'en': 'Custom Heat Exchanger'
            },
            '–¢—Ä—É–±—á–∞—Ç—ã–µ': {
                'uk': '–ö–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫',
                'ru': '–ö–æ–∂—É—Ö–æ—Ç—Ä—É–±–Ω—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫',
                'en': 'Shell & Tube Heat Exchanger'
            },
            '–ü–∞—è–Ω—ã–µ': {
                'uk': '–ü–∞—è–Ω–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫',
                'ru': '–ü–∞—è–Ω—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫',
                'en': 'Brazed Heat Exchanger'
            },
            '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–µ': {
                'uk': '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç–∏–π —Ç–µ–ø–ª–æ–æ–±–º—ñ–Ω–Ω–∏–∫',
                'ru': '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–π —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫',
                'en': 'Plate Heat Exchanger'
            }
        }
        
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É –Ω–∞–∑–≤—É –∑ —Ñ–∞–π–ª—ñ–≤
        specific_name = self.extract_name_from_files(product_dir)
        base = base_names.get(category_folder, base_names['–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç'])
        
        if specific_name:
            name_suffix = f" {specific_name}"
        else:
            name_suffix = f" ‚Ññ{product_number}"
        
        return {
            'name_uk': base['uk'] + name_suffix,
            'name_ru': base['ru'] + name_suffix,
            'name_en': base['en'] + name_suffix,
            'short_description_uk': f"–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π {base['uk'].lower()} –¥–ª—è –ø—Ä–æ–º–∏—Å–ª–æ–≤–∏—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω—å",
            'short_description_ru': f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π {base['ru'].lower()} –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π",
            'short_description_en': f"Professional {base['en'].lower()} for industrial applications",
            'description_uk': f"–í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π {base['uk'].lower()} –∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–¥–∞—á—ñ. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ–º–∏—Å–ª–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –Ω–∞–¥—ñ–π–Ω—É —Ä–æ–±–æ—Ç—É –≤ —Å–∫–ª–∞–¥–Ω–∏—Ö —É–º–æ–≤–∞—Ö –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—ó.",
            'description_ru': f"–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {base['ru'].lower()} —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–¥–∞—á–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.",
            'description_en': f"High-quality {base['en'].lower()} with optimal heat transfer characteristics. Suitable for various industrial processes and ensures reliable operation in demanding conditions."
        }
    
    def extract_name_from_files(self, product_dir):
        """–í–∏—Ç—è–≥—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É –Ω–∞–∑–≤—É –∑ —ñ–º–µ–Ω —Ñ–∞–π–ª—ñ–≤"""
        
        # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑ –Ω–∞–∑–≤–∞–º–∏ –±—Ä–µ–Ω–¥—ñ–≤ –∞–±–æ –º–æ–¥–µ–ª–µ–π
        for file_path in product_dir.iterdir():
            if file_path.is_file():
                name = file_path.stem
                
                # –í—ñ–¥–æ–º—ñ –±—Ä–µ–Ω–¥–∏
                if 'Alfa Laval' in name:
                    return name.replace('_', ' ')
                elif 'Funke' in name:
                    return name.replace('_', ' ')
                elif 'FP' in name and any(c.isdigit() for c in name):
                    return name.replace('_', ' ')
                elif any(brand in name.upper() for brand in ['HXC', 'TGB', 'NT_']):
                    return name.replace('_', ' ')
        
        return None
    
    def estimate_power(self, product_dir):
        """–û—Ü—ñ–Ω–∫–∞ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ–∞–π–ª—ñ–≤"""
        for file_path in product_dir.iterdir():
            name = file_path.name.upper()
            if 'KW' in name or '–ö–í–¢' in name:
                # –í–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ kW
                import re
                match = re.search(r'(\d+)\s*[K–ö][W–í–¢]', name)
                if match:
                    return float(match.group(1))
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        defaults = {
            1: 25.0, 2: 50.0, 3: 100.0, 4: 150.0, 5: 200.0,
            6: 250.0, 7: 300.0, 8: 400.0, 9: 500.0, 10: 750.0
        }
        return defaults.get(int(product_dir.name), 100.0)
    
    def estimate_pressure(self, category_folder):
        """–û—Ü—ñ–Ω–∫–∞ —Ç–∏—Å–∫—É –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
        pressures = {
            '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–µ': 16.0,
            '–ü–∞—è–Ω—ã–µ': 30.0,
            '–¢—Ä—É–±—á–∞—Ç—ã–µ': 25.0,
            '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 20.0
        }
        return pressures.get(category_folder, 16.0)
    
    def estimate_temperature(self, category_folder):
        """–û—Ü—ñ–Ω–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
        temperatures = {
            '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–µ': 180.0,
            '–ü–∞—è–Ω—ã–µ': 200.0,
            '–¢—Ä—É–±—á–∞—Ç—ã–µ': 350.0,
            '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 250.0
        }
        return temperatures.get(category_folder, 180.0)
    
    def get_application_type(self, category_folder):
        """–¢–∏–ø –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
        applications = {
            '–ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç—ã–µ': 'COMPACT',
            '–ü–∞—è–Ω—ã–µ': 'COMPACT',
            '–¢—Ä—É–±—á–∞—Ç—ã–µ': 'INDUSTRIAL',
            '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 'CUSTOM'
        }
        return applications.get(category_folder, 'INDUSTRIAL')
    
    def add_files_to_gallery(self, product, product_dir, category_folder, product_number):
        """–î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏ –∑ –ø–∞–ø–∫–∏ –¥–æ –≥–∞–ª–µ—Ä–µ—ó –ø—Ä–æ–¥—É–∫—Ç—É"""
        
        files_added = 0
        
        # –¢–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤
        image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'}
        cad_extensions = {'.stp', '.step', '.iges', '.igs', '.dwg', '.dxf'}
        web_3d_extensions = {'.gltf', '.glb', '.obj'}
        archive_extensions = {'.rar', '.zip', '.7z'}
        cad_native_extensions = {'.sldprt', '.sldasm', '.ipt', '.iam', '.prt', '.asm'}
        
        # –°–æ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª–∏ –∑–∞ —Ç–∏–ø–æ–º
        files_by_type = {
            'images': [],
            '3d_cad': [],
            '3d_web': [],
            'archives': [],
            'cad_native': []
        }
        
        for file_path in product_dir.iterdir():
            if file_path.is_file():
                ext = file_path.suffix.lower()
                
                if ext in image_extensions:
                    files_by_type['images'].append(file_path)
                elif ext in cad_extensions:
                    files_by_type['3d_cad'].append(file_path)
                elif ext in web_3d_extensions:
                    files_by_type['3d_web'].append(file_path)
                elif ext in archive_extensions:
                    files_by_type['archives'].append(file_path)
                elif ext in cad_native_extensions:
                    files_by_type['cad_native'].append(file_path)
        
        order = 0
        
        # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É
        for img_path in files_by_type['images']:
            if self.add_gallery_item(product, img_path, 'IMAGE', order):
                files_added += 1
                order += 1
        
        # –î–æ–¥–∞—î–º–æ 3D –º–æ–¥–µ–ª—ñ
        for cad_path in files_by_type['3d_cad'] + files_by_type['3d_web'] + files_by_type['cad_native']:
            preview_img = self.find_preview_image(cad_path, files_by_type['images'])
            if self.add_gallery_item(product, cad_path, '3D_MODEL', order, preview_img):
                files_added += 1
                order += 1
        
        # –î–æ–¥–∞—î–º–æ –∫—Ä–µ—Å–ª–µ–Ω–Ω—è (DWG files)
        for file_path in product_dir.iterdir():
            if file_path.suffix.lower() == '.dwg':
                if self.add_gallery_item(product, file_path, 'TECHNICAL_DRAWING', order):
                    files_added += 1
                    order += 1
        
        return files_added
    
    def find_preview_image(self, cad_file, image_files):
        """–ó–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–µ preview –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è 3D –º–æ–¥–µ–ª—ñ"""
        cad_name = cad_file.stem.lower()
        
        # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —Ñ–∞–π–ª –∑ —Å—Ö–æ–∂–æ—é –Ω–∞–∑–≤–æ—é
        for img_path in image_files:
            img_name = img_path.stem.lower()
            if img_name in cad_name or cad_name in img_name:
                return img_path
        
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        return image_files[0] if image_files else None
    
    def add_gallery_item(self, product, file_path, content_type, order, preview_img=None):
        """–î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª –¥–æ –≥–∞–ª–µ—Ä–µ—ó –ø—Ä–æ–¥—É–∫—Ç—É"""
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î
        existing = ProductGallery.objects.filter(
            product=product,
            alt_text=file_path.name
        ).first()
        
        if existing:
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–∑–≤—É
        clean_name = file_path.stem.replace('_', ' ').replace('-', ' ').title()
        
        gallery_item = ProductGallery.objects.create(
            product=product,
            content_type=content_type,
            title_uk=clean_name,
            title_ru=clean_name,
            title_en=clean_name,
            alt_text=file_path.name,
            description=f"–§–∞–π–ª {content_type.lower()} –¥–ª—è {product.name_uk}",
            order=order,
            is_downloadable=True,
            file_size=self.get_file_size(file_path)
        )
        
        try:
            # –î–æ–¥–∞—î–º–æ —Ñ–∞–π–ª
            if content_type == 'IMAGE':
                with open(file_path, 'rb') as f:
                    gallery_item.image.save(file_path.name, File(f), save=False)
            else:
                with open(file_path, 'rb') as f:
                    gallery_item.file_3d.save(file_path.name, File(f), save=False)
                
                # –î–æ–¥–∞—î–º–æ preview –¥–ª—è 3D
                if preview_img and preview_img.exists():
                    with open(preview_img, 'rb') as f:
                        gallery_item.preview_image.save(f"preview_{file_path.name}.jpg", File(f), save=False)
            
            gallery_item.save()
            
            # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if self.copy_files:
                self.copy_file_to_media(file_path, gallery_item, content_type)
            
            return True
            
        except Exception as e:
            self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è {file_path.name}: {e}")
            gallery_item.delete()
            return False
    
    def copy_file_to_media(self, source_path, gallery_item, content_type):
        """–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ñ–∞–π–ª –¥–æ media –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"""
        try:
            if content_type == 'IMAGE' and gallery_item.image:
                media_path = Path(settings.MEDIA_ROOT) / gallery_item.image.name
                media_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(source_path, media_path)
            elif gallery_item.file_3d:
                media_path = Path(settings.MEDIA_ROOT) / gallery_item.file_3d.name
                media_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(source_path, media_path)
        except Exception as e:
            self.stdout.write(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è {source_path.name}: {e}")
    
    def get_file_size(self, file_path):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –≤ –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
        size = file_path.stat().st_size
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} TB"
